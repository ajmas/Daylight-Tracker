/*
	 USE UTF-8 ENCODING AND A MONOSPACED FONT TO VIEW CORRECTLY
 */

//import com.sun.java.swing.*;
package ajmas74.daylighttracker;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;
import java.util.Date;

public class DaylightTracker2 extends JFrame implements Runnable
{
	
	NightDay nd = null;
	GeographicalMap mapPanel = null;
	ImageIcon theImage = null;

	Vector visibleMapLayers = new Vector();	
	//Vector allLayers = new Vector();
	CheckboxMenuItem[] menuMapLayers = null;
	Vector allMapLayers = new Vector();
	
	Menu fileMenu = null;
	Menu editMenu = null;
	Menu helpMenu = null;
	Menu layersMenu = null;
	
	MenuItem file_quitItem = null;
	
	MenuItem edit_undoItem = null;
	MenuItem edit_cutItem = null;
	MenuItem edit_copyItem = null;
	MenuItem edit_pasteItem = null;
	MenuItem edit_clearItem = null;
	MenuItem edit_prefsItem = null;
		
	MenuItem help_aboutItem = null;
	
	boolean _loop = true;
	
	public DaylightTracker2()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(new BorderLayout());
		setSize(560,300);
		setTitle("Day and Night");
		//}}


		//setResizable(false);

	
		JPanel theRealBasePanel = new JPanel();
		theRealBasePanel.setLayout( new MultiCompBorderLayout() );
		getContentPane().add(theRealBasePanel);
				
		MenuBar theMenuBar = new MenuBar();
		setMenuBar (theMenuBar);
		
	
		theMenuBar.add( fileMenu = new Menu("File") );
		fileMenu.add( file_quitItem = new MenuItem("Quit") );
		
		theMenuBar.add( editMenu = new Menu("Edit") );
		editMenu.add( edit_undoItem = new MenuItem("Undo") );
		edit_undoItem.setEnabled(false);
		editMenu.add( new MenuItem("-") );
		editMenu.add( edit_cutItem = new MenuItem("Cut") );
		edit_cutItem.setEnabled(false);
		editMenu.add( edit_copyItem = new MenuItem("Copy") );
		edit_copyItem.setEnabled(false);
		editMenu.add( edit_pasteItem = new MenuItem("Paste") );
		edit_pasteItem.setEnabled(false);
		editMenu.add( edit_clearItem = new MenuItem("Clear") );
		edit_clearItem.setEnabled(false);
		editMenu.add( new MenuItem("-") );		
		editMenu.add( edit_prefsItem = new MenuItem("Preferences...") );
		
		theMenuBar.add( layersMenu = new Menu("Layers") );
		
		theMenuBar.setHelpMenu( helpMenu = new Menu("Help") );
		helpMenu.add( help_aboutItem = new MenuItem("About JSunTool...") );
	
			
		allMapLayers.addElement(new OverlayedTimeLayer());		
		allMapLayers.addElement(new NightDay());
		allMapLayers.addElement(new GeographicalMap());
		allMapLayers.addElement(new TopographicalMap());
		
		menuMapLayers = new CheckboxMenuItem[ allMapLayers.size() ];
		
		
		CheckboxMenuActionListener theCheckboxMenuActionListener = new CheckboxMenuActionListener();
		
		for (int i=0; i < allMapLayers.size(); i++) {
			
			visibleMapLayers.addElement( allMapLayers.elementAt(i) );
			theRealBasePanel.add( (Component)(visibleMapLayers.elementAt(i)) );

			//CheckboxMenuItem tempMenuItem 
			menuMapLayers[i] = new CheckboxMenuItem( ((MapLayer)(allMapLayers.elementAt(i))).getShortName(), true );			
			menuMapLayers[i].setActionCommand( new String("MapLayer." + i) );
			menuMapLayers[i].addItemListener( theCheckboxMenuActionListener );			
			layersMenu.add( menuMapLayers[i] ); 
			
		}
		
		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		//}}
		
		//Timer theTimer = new Timer ( 1800000, new TimerActionListener() );
//		Timer theTimer = new Timer ( 1000, new TimerActionListener() );
//		theTimer.start();
		(new Thread(this)).start();
		
		MenuActionListener theMenuActionListener = new MenuActionListener();
		file_quitItem.addActionListener( theMenuActionListener );
		help_aboutItem.addActionListener( theMenuActionListener );		
	}

	public DaylightTracker2(String title)
	{
		this();
		setTitle(title);
	}

   /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new DaylightTracker2()).setVisible(true);
	}
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	//}}

	//{{DECLARE_MENUS
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == DaylightTracker2.this)
				Frame_WindowClosing(event);
		}
	}
	
	void Frame_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
		System.exit(0);
	}
	
	
	
  public void run() {
    Rectangle rect = this.getBounds();
    repaint(rect.x,rect.y,rect.width,rect.height);
    while ( _loop ) {
      try {
        Thread.sleep(60000);        
      } catch ( InterruptedException ex ) {
      }
      Date date = new Date();
			for (int i=0; i < visibleMapLayers.size(); i++) {
				MapLayer theObj = (MapLayer) (visibleMapLayers.elementAt(i));
				theObj.setDateTime( date );
			}      
      repaint(0);
    }
  }
  
//	class TimerActionListener implements ActionListener {
//		public void actionPerformed(ActionEvent e) {
//			for (int i=0; i < visibleMapLayers.size(); i++) {
//				MapLayer theObj = (MapLayer) (visibleMapLayers.elementAt(i));
//				theObj.setDateTime( new Date() );
//			}
//			//repaint(10);
//		}
//	}


	class MenuActionListener implements ActionListener {
		public void actionPerformed(ActionEvent event) {						
			Object object = event.getSource();
			if (object == file_quitItem) {
				Frame_WindowClosing(null);
			} else if (object == help_aboutItem) {
				(new About()).setVisible(true);
			}
			
			/*
			Date theDate = nd.getDate();
			theDate.setHours( theDate.getHours() + 2 );
			nd.setDate( theDate );
			repaint(10);
			*/
		}
	}
	
	
	
	class CheckboxMenuActionListener implements ItemListener {
		public void itemStateChanged( ItemEvent event ) {
			CheckboxMenuItem theMenuItem = (CheckboxMenuItem) (event.getSource());

			String strIndex = theMenuItem.getActionCommand().substring( theMenuItem.getActionCommand().lastIndexOf('.') + 1 );
			int index = (new Integer(strIndex)).intValue();
			if ( theMenuItem.getState() ) {
				((Component)visibleMapLayers.elementAt(index)).setVisible(true);
			} else {
				((Component)visibleMapLayers.elementAt(index)).setVisible(false);
			}
			
			System.out.println("Action = " + theMenuItem.getActionCommand() ) ;
			System.out.println("       = " + theMenuItem.getState() ) ;

		}
	}
	
	
}


class About extends JDialog {
	
	About() {
		//JLabel jl = new JLabel("By AJ Mas");
		Label jl = new Label("By AJ Mas");
		getContentPane().setLayout(new BorderLayout());
		getContentPane().add(jl);
		setBounds (200,200,200,100);
		setModal(true);
	}
	
}
